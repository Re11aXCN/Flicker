// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FKPasswordGrpc.proto
#ifndef GRPC_FKPasswordGrpc_2eproto__INCLUDED
#define GRPC_FKPasswordGrpc_2eproto__INCLUDED

#include "FKPasswordGrpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace FKPasswordGrpc {

class PasswordService final {
 public:
  static constexpr char const* service_full_name() {
    return "FKPasswordGrpc.PasswordService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::EncryptPasswordResponseBody>> AsyncEncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::EncryptPasswordResponseBody>>(AsyncEncryptPasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::EncryptPasswordResponseBody>> PrepareAsyncEncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::EncryptPasswordResponseBody>>(PrepareAsyncEncryptPasswordRaw(context, request, cq));
    }
    virtual ::grpc::Status AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>> AsyncAuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>>(AsyncAuthenticatePasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>> PrepareAsyncAuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>>(PrepareAsyncAuthenticatePasswordRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::EncryptPasswordResponseBody>* AsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::EncryptPasswordResponseBody>* PrepareAsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* AsyncAuthenticatePasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* PrepareAsyncAuthenticatePasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::EncryptPasswordResponseBody>> AsyncEncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::EncryptPasswordResponseBody>>(AsyncEncryptPasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::EncryptPasswordResponseBody>> PrepareAsyncEncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::EncryptPasswordResponseBody>>(PrepareAsyncEncryptPasswordRaw(context, request, cq));
    }
    ::grpc::Status AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>> AsyncAuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>>(AsyncAuthenticatePasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>> PrepareAsyncAuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>>(PrepareAsyncAuthenticatePasswordRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response, std::function<void(::grpc::Status)>) override;
      void EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response, std::function<void(::grpc::Status)>) override;
      void AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::EncryptPasswordResponseBody>* AsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::EncryptPasswordResponseBody>* PrepareAsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* AsyncAuthenticatePasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* PrepareAsyncAuthenticatePasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_EncryptPassword_;
    const ::grpc::internal::RpcMethod rpcmethod_AuthenticatePassword_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status EncryptPassword(::grpc::ServerContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response);
    virtual ::grpc::Status AuthenticatePassword(::grpc::ServerContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::EncryptPasswordRequestBody* /*request*/, ::FKPasswordGrpc::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptPassword(::grpc::ServerContext* context, ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::grpc::ServerAsyncResponseWriter< ::FKPasswordGrpc::EncryptPasswordResponseBody>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AuthenticatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuthenticatePassword() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AuthenticatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* /*request*/, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticatePassword(::grpc::ServerContext* context, ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::grpc::ServerAsyncResponseWriter< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EncryptPassword<WithAsyncMethod_AuthenticatePassword<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::FKPasswordGrpc::EncryptPasswordRequestBody, ::FKPasswordGrpc::EncryptPasswordResponseBody>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response) { return this->EncryptPassword(context, request, response); }));}
    void SetMessageAllocatorFor_EncryptPassword(
        ::grpc::MessageAllocator< ::FKPasswordGrpc::EncryptPasswordRequestBody, ::FKPasswordGrpc::EncryptPasswordResponseBody>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FKPasswordGrpc::EncryptPasswordRequestBody, ::FKPasswordGrpc::EncryptPasswordResponseBody>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::EncryptPasswordRequestBody* /*request*/, ::FKPasswordGrpc::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EncryptPassword(
      ::grpc::CallbackServerContext* /*context*/, const ::FKPasswordGrpc::EncryptPasswordRequestBody* /*request*/, ::FKPasswordGrpc::EncryptPasswordResponseBody* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AuthenticatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuthenticatePassword() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::FKPasswordGrpc::AuthenticatePasswordResponseBody>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response) { return this->AuthenticatePassword(context, request, response); }));}
    void SetMessageAllocatorFor_AuthenticatePassword(
        ::grpc::MessageAllocator< ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::FKPasswordGrpc::AuthenticatePasswordResponseBody>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuthenticatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* /*request*/, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthenticatePassword(
      ::grpc::CallbackServerContext* /*context*/, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* /*request*/, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_EncryptPassword<WithCallbackMethod_AuthenticatePassword<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::EncryptPasswordRequestBody* /*request*/, ::FKPasswordGrpc::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AuthenticatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuthenticatePassword() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AuthenticatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* /*request*/, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::EncryptPasswordRequestBody* /*request*/, ::FKPasswordGrpc::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptPassword(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuthenticatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuthenticatePassword() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AuthenticatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* /*request*/, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticatePassword(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EncryptPassword(context, request, response); }));
    }
    ~WithRawCallbackMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::EncryptPasswordRequestBody* /*request*/, ::FKPasswordGrpc::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EncryptPassword(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuthenticatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuthenticatePassword() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuthenticatePassword(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuthenticatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* /*request*/, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthenticatePassword(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FKPasswordGrpc::EncryptPasswordRequestBody, ::FKPasswordGrpc::EncryptPasswordResponseBody>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FKPasswordGrpc::EncryptPasswordRequestBody, ::FKPasswordGrpc::EncryptPasswordResponseBody>* streamer) {
                       return this->StreamedEncryptPassword(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::EncryptPasswordRequestBody* /*request*/, ::FKPasswordGrpc::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncryptPassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FKPasswordGrpc::EncryptPasswordRequestBody,::FKPasswordGrpc::EncryptPasswordResponseBody>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuthenticatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuthenticatePassword() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::FKPasswordGrpc::AuthenticatePasswordResponseBody>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* streamer) {
                       return this->StreamedAuthenticatePassword(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuthenticatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuthenticatePassword(::grpc::ServerContext* /*context*/, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* /*request*/, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticatePassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FKPasswordGrpc::AuthenticatePasswordRequestBody,::FKPasswordGrpc::AuthenticatePasswordResponseBody>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EncryptPassword<WithStreamedUnaryMethod_AuthenticatePassword<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_EncryptPassword<WithStreamedUnaryMethod_AuthenticatePassword<Service > > StreamedService;
};

}  // namespace FKPasswordGrpc


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_FKPasswordGrpc_2eproto__INCLUDED
