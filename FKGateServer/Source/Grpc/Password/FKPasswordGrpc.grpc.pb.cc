// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FKPasswordGrpc.proto

#include "FKPasswordGrpc.pb.h"
#include "FKPasswordGrpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace FKPasswordGrpc {

static const char* PasswordService_method_names[] = {
  "/FKPasswordGrpc.PasswordService/EncryptPassword",
  "/FKPasswordGrpc.PasswordService/AuthenticatePassword",
};

std::unique_ptr< PasswordService::Stub> PasswordService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PasswordService::Stub> stub(new PasswordService::Stub(channel, options));
  return stub;
}

PasswordService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EncryptPassword_(PasswordService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticatePassword_(PasswordService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PasswordService::Stub::EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FKPasswordGrpc::EncryptPasswordRequestBody, ::FKPasswordGrpc::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EncryptPassword_, context, request, response);
}

void PasswordService::Stub::async::EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FKPasswordGrpc::EncryptPasswordRequestBody, ::FKPasswordGrpc::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncryptPassword_, context, request, response, std::move(f));
}

void PasswordService::Stub::async::EncryptPassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncryptPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::EncryptPasswordResponseBody>* PasswordService::Stub::PrepareAsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FKPasswordGrpc::EncryptPasswordResponseBody, ::FKPasswordGrpc::EncryptPasswordRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EncryptPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::EncryptPasswordResponseBody>* PasswordService::Stub::AsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncryptPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PasswordService::Stub::AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::FKPasswordGrpc::AuthenticatePasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthenticatePassword_, context, request, response);
}

void PasswordService::Stub::async::AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::FKPasswordGrpc::AuthenticatePasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticatePassword_, context, request, response, std::move(f));
}

void PasswordService::Stub::async::AuthenticatePassword(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticatePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* PasswordService::Stub::PrepareAsyncAuthenticatePasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FKPasswordGrpc::AuthenticatePasswordResponseBody, ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthenticatePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FKPasswordGrpc::AuthenticatePasswordResponseBody>* PasswordService::Stub::AsyncAuthenticatePasswordRaw(::grpc::ClientContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticatePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

PasswordService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PasswordService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PasswordService::Service, ::FKPasswordGrpc::EncryptPasswordRequestBody, ::FKPasswordGrpc::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PasswordService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FKPasswordGrpc::EncryptPasswordRequestBody* req,
             ::FKPasswordGrpc::EncryptPasswordResponseBody* resp) {
               return service->EncryptPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PasswordService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PasswordService::Service, ::FKPasswordGrpc::AuthenticatePasswordRequestBody, ::FKPasswordGrpc::AuthenticatePasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PasswordService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* req,
             ::FKPasswordGrpc::AuthenticatePasswordResponseBody* resp) {
               return service->AuthenticatePassword(ctx, req, resp);
             }, this)));
}

PasswordService::Service::~Service() {
}

::grpc::Status PasswordService::Service::EncryptPassword(::grpc::ServerContext* context, const ::FKPasswordGrpc::EncryptPasswordRequestBody* request, ::FKPasswordGrpc::EncryptPasswordResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PasswordService::Service::AuthenticatePassword(::grpc::ServerContext* context, const ::FKPasswordGrpc::AuthenticatePasswordRequestBody* request, ::FKPasswordGrpc::AuthenticatePasswordResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace FKPasswordGrpc

