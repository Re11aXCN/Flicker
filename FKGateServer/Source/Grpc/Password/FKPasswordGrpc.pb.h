// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: FKPasswordGrpc.proto
// Protobuf C++ Version: 5.29.3

#ifndef FKPasswordGrpc_2eproto_2epb_2eh
#define FKPasswordGrpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_FKPasswordGrpc_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_FKPasswordGrpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_FKPasswordGrpc_2eproto;
namespace FKPasswordGrpc {
class AuthenticatePasswordRequestBody;
struct AuthenticatePasswordRequestBodyDefaultTypeInternal;
extern AuthenticatePasswordRequestBodyDefaultTypeInternal _AuthenticatePasswordRequestBody_default_instance_;
class AuthenticatePasswordResponseBody;
struct AuthenticatePasswordResponseBodyDefaultTypeInternal;
extern AuthenticatePasswordResponseBodyDefaultTypeInternal _AuthenticatePasswordResponseBody_default_instance_;
class EncryptPasswordRequestBody;
struct EncryptPasswordRequestBodyDefaultTypeInternal;
extern EncryptPasswordRequestBodyDefaultTypeInternal _EncryptPasswordRequestBody_default_instance_;
class EncryptPasswordResponseBody;
struct EncryptPasswordResponseBodyDefaultTypeInternal;
extern EncryptPasswordResponseBodyDefaultTypeInternal _EncryptPasswordResponseBody_default_instance_;
}  // namespace FKPasswordGrpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace FKPasswordGrpc {

// ===================================================================


// -------------------------------------------------------------------

class EncryptPasswordResponseBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FKPasswordGrpc.EncryptPasswordResponseBody) */ {
 public:
  inline EncryptPasswordResponseBody() : EncryptPasswordResponseBody(nullptr) {}
  ~EncryptPasswordResponseBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EncryptPasswordResponseBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EncryptPasswordResponseBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EncryptPasswordResponseBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline EncryptPasswordResponseBody(const EncryptPasswordResponseBody& from) : EncryptPasswordResponseBody(nullptr, from) {}
  inline EncryptPasswordResponseBody(EncryptPasswordResponseBody&& from) noexcept
      : EncryptPasswordResponseBody(nullptr, std::move(from)) {}
  inline EncryptPasswordResponseBody& operator=(const EncryptPasswordResponseBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptPasswordResponseBody& operator=(EncryptPasswordResponseBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptPasswordResponseBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptPasswordResponseBody* internal_default_instance() {
    return reinterpret_cast<const EncryptPasswordResponseBody*>(
        &_EncryptPasswordResponseBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EncryptPasswordResponseBody& a, EncryptPasswordResponseBody& b) { a.Swap(&b); }
  inline void Swap(EncryptPasswordResponseBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptPasswordResponseBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptPasswordResponseBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EncryptPasswordResponseBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EncryptPasswordResponseBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EncryptPasswordResponseBody& from) { EncryptPasswordResponseBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EncryptPasswordResponseBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FKPasswordGrpc.EncryptPasswordResponseBody"; }

 protected:
  explicit EncryptPasswordResponseBody(::google::protobuf::Arena* arena);
  EncryptPasswordResponseBody(::google::protobuf::Arena* arena, const EncryptPasswordResponseBody& from);
  EncryptPasswordResponseBody(::google::protobuf::Arena* arena, EncryptPasswordResponseBody&& from) noexcept
      : EncryptPasswordResponseBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kEncryptedPasswordFieldNumber = 4,
    kSaltFieldNumber = 5,
    kStatusCodeFieldNumber = 1,
    kRequestTypeFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string encrypted_password = 4;
  void clear_encrypted_password() ;
  const std::string& encrypted_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_password(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_password();
  PROTOBUF_NODISCARD std::string* release_encrypted_password();
  void set_allocated_encrypted_password(std::string* value);

  private:
  const std::string& _internal_encrypted_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_password(
      const std::string& value);
  std::string* _internal_mutable_encrypted_password();

  public:
  // string salt = 5;
  void clear_salt() ;
  const std::string& salt() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_salt(Arg_&& arg, Args_... args);
  std::string* mutable_salt();
  PROTOBUF_NODISCARD std::string* release_salt();
  void set_allocated_salt(std::string* value);

  private:
  const std::string& _internal_salt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt(
      const std::string& value);
  std::string* _internal_mutable_salt();

  public:
  // int32 status_code = 1;
  void clear_status_code() ;
  ::int32_t status_code() const;
  void set_status_code(::int32_t value);

  private:
  ::int32_t _internal_status_code() const;
  void _internal_set_status_code(::int32_t value);

  public:
  // int32 request_type = 3;
  void clear_request_type() ;
  ::int32_t request_type() const;
  void set_request_type(::int32_t value);

  private:
  ::int32_t _internal_request_type() const;
  void _internal_set_request_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:FKPasswordGrpc.EncryptPasswordResponseBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EncryptPasswordResponseBody& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_password_;
    ::google::protobuf::internal::ArenaStringPtr salt_;
    ::int32_t status_code_;
    ::int32_t request_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FKPasswordGrpc_2eproto;
};
// -------------------------------------------------------------------

class EncryptPasswordRequestBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FKPasswordGrpc.EncryptPasswordRequestBody) */ {
 public:
  inline EncryptPasswordRequestBody() : EncryptPasswordRequestBody(nullptr) {}
  ~EncryptPasswordRequestBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EncryptPasswordRequestBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EncryptPasswordRequestBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EncryptPasswordRequestBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline EncryptPasswordRequestBody(const EncryptPasswordRequestBody& from) : EncryptPasswordRequestBody(nullptr, from) {}
  inline EncryptPasswordRequestBody(EncryptPasswordRequestBody&& from) noexcept
      : EncryptPasswordRequestBody(nullptr, std::move(from)) {}
  inline EncryptPasswordRequestBody& operator=(const EncryptPasswordRequestBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptPasswordRequestBody& operator=(EncryptPasswordRequestBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptPasswordRequestBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptPasswordRequestBody* internal_default_instance() {
    return reinterpret_cast<const EncryptPasswordRequestBody*>(
        &_EncryptPasswordRequestBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EncryptPasswordRequestBody& a, EncryptPasswordRequestBody& b) { a.Swap(&b); }
  inline void Swap(EncryptPasswordRequestBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptPasswordRequestBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptPasswordRequestBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EncryptPasswordRequestBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EncryptPasswordRequestBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EncryptPasswordRequestBody& from) { EncryptPasswordRequestBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EncryptPasswordRequestBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FKPasswordGrpc.EncryptPasswordRequestBody"; }

 protected:
  explicit EncryptPasswordRequestBody(::google::protobuf::Arena* arena);
  EncryptPasswordRequestBody(::google::protobuf::Arena* arena, const EncryptPasswordRequestBody& from);
  EncryptPasswordRequestBody(::google::protobuf::Arena* arena, EncryptPasswordRequestBody&& from) noexcept
      : EncryptPasswordRequestBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashedPasswordFieldNumber = 2,
    kRequestTypeFieldNumber = 1,
  };
  // string hashed_password = 2;
  void clear_hashed_password() ;
  const std::string& hashed_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hashed_password(Arg_&& arg, Args_... args);
  std::string* mutable_hashed_password();
  PROTOBUF_NODISCARD std::string* release_hashed_password();
  void set_allocated_hashed_password(std::string* value);

  private:
  const std::string& _internal_hashed_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashed_password(
      const std::string& value);
  std::string* _internal_mutable_hashed_password();

  public:
  // int32 request_type = 1;
  void clear_request_type() ;
  ::int32_t request_type() const;
  void set_request_type(::int32_t value);

  private:
  ::int32_t _internal_request_type() const;
  void _internal_set_request_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:FKPasswordGrpc.EncryptPasswordRequestBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EncryptPasswordRequestBody& from_msg);
    ::google::protobuf::internal::ArenaStringPtr hashed_password_;
    ::int32_t request_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FKPasswordGrpc_2eproto;
};
// -------------------------------------------------------------------

class AuthenticatePasswordResponseBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FKPasswordGrpc.AuthenticatePasswordResponseBody) */ {
 public:
  inline AuthenticatePasswordResponseBody() : AuthenticatePasswordResponseBody(nullptr) {}
  ~AuthenticatePasswordResponseBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthenticatePasswordResponseBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthenticatePasswordResponseBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthenticatePasswordResponseBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthenticatePasswordResponseBody(const AuthenticatePasswordResponseBody& from) : AuthenticatePasswordResponseBody(nullptr, from) {}
  inline AuthenticatePasswordResponseBody(AuthenticatePasswordResponseBody&& from) noexcept
      : AuthenticatePasswordResponseBody(nullptr, std::move(from)) {}
  inline AuthenticatePasswordResponseBody& operator=(const AuthenticatePasswordResponseBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticatePasswordResponseBody& operator=(AuthenticatePasswordResponseBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticatePasswordResponseBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticatePasswordResponseBody* internal_default_instance() {
    return reinterpret_cast<const AuthenticatePasswordResponseBody*>(
        &_AuthenticatePasswordResponseBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AuthenticatePasswordResponseBody& a, AuthenticatePasswordResponseBody& b) { a.Swap(&b); }
  inline void Swap(AuthenticatePasswordResponseBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticatePasswordResponseBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticatePasswordResponseBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthenticatePasswordResponseBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthenticatePasswordResponseBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthenticatePasswordResponseBody& from) { AuthenticatePasswordResponseBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthenticatePasswordResponseBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FKPasswordGrpc.AuthenticatePasswordResponseBody"; }

 protected:
  explicit AuthenticatePasswordResponseBody(::google::protobuf::Arena* arena);
  AuthenticatePasswordResponseBody(::google::protobuf::Arena* arena, const AuthenticatePasswordResponseBody& from);
  AuthenticatePasswordResponseBody(::google::protobuf::Arena* arena, AuthenticatePasswordResponseBody&& from) noexcept
      : AuthenticatePasswordResponseBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
    kRequestTypeFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // int32 status_code = 1;
  void clear_status_code() ;
  ::int32_t status_code() const;
  void set_status_code(::int32_t value);

  private:
  ::int32_t _internal_status_code() const;
  void _internal_set_status_code(::int32_t value);

  public:
  // int32 request_type = 3;
  void clear_request_type() ;
  ::int32_t request_type() const;
  void set_request_type(::int32_t value);

  private:
  ::int32_t _internal_request_type() const;
  void _internal_set_request_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:FKPasswordGrpc.AuthenticatePasswordResponseBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthenticatePasswordResponseBody& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::int32_t status_code_;
    ::int32_t request_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FKPasswordGrpc_2eproto;
};
// -------------------------------------------------------------------

class AuthenticatePasswordRequestBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FKPasswordGrpc.AuthenticatePasswordRequestBody) */ {
 public:
  inline AuthenticatePasswordRequestBody() : AuthenticatePasswordRequestBody(nullptr) {}
  ~AuthenticatePasswordRequestBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthenticatePasswordRequestBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthenticatePasswordRequestBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthenticatePasswordRequestBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthenticatePasswordRequestBody(const AuthenticatePasswordRequestBody& from) : AuthenticatePasswordRequestBody(nullptr, from) {}
  inline AuthenticatePasswordRequestBody(AuthenticatePasswordRequestBody&& from) noexcept
      : AuthenticatePasswordRequestBody(nullptr, std::move(from)) {}
  inline AuthenticatePasswordRequestBody& operator=(const AuthenticatePasswordRequestBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticatePasswordRequestBody& operator=(AuthenticatePasswordRequestBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticatePasswordRequestBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticatePasswordRequestBody* internal_default_instance() {
    return reinterpret_cast<const AuthenticatePasswordRequestBody*>(
        &_AuthenticatePasswordRequestBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AuthenticatePasswordRequestBody& a, AuthenticatePasswordRequestBody& b) { a.Swap(&b); }
  inline void Swap(AuthenticatePasswordRequestBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticatePasswordRequestBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticatePasswordRequestBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthenticatePasswordRequestBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthenticatePasswordRequestBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthenticatePasswordRequestBody& from) { AuthenticatePasswordRequestBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthenticatePasswordRequestBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FKPasswordGrpc.AuthenticatePasswordRequestBody"; }

 protected:
  explicit AuthenticatePasswordRequestBody(::google::protobuf::Arena* arena);
  AuthenticatePasswordRequestBody(::google::protobuf::Arena* arena, const AuthenticatePasswordRequestBody& from);
  AuthenticatePasswordRequestBody(::google::protobuf::Arena* arena, AuthenticatePasswordRequestBody&& from) noexcept
      : AuthenticatePasswordRequestBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashedPasswordFieldNumber = 2,
    kEncryptedPasswordFieldNumber = 3,
    kRequestTypeFieldNumber = 1,
  };
  // string hashed_password = 2;
  void clear_hashed_password() ;
  const std::string& hashed_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hashed_password(Arg_&& arg, Args_... args);
  std::string* mutable_hashed_password();
  PROTOBUF_NODISCARD std::string* release_hashed_password();
  void set_allocated_hashed_password(std::string* value);

  private:
  const std::string& _internal_hashed_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashed_password(
      const std::string& value);
  std::string* _internal_mutable_hashed_password();

  public:
  // string encrypted_password = 3;
  void clear_encrypted_password() ;
  const std::string& encrypted_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_password(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_password();
  PROTOBUF_NODISCARD std::string* release_encrypted_password();
  void set_allocated_encrypted_password(std::string* value);

  private:
  const std::string& _internal_encrypted_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_password(
      const std::string& value);
  std::string* _internal_mutable_encrypted_password();

  public:
  // int32 request_type = 1;
  void clear_request_type() ;
  ::int32_t request_type() const;
  void set_request_type(::int32_t value);

  private:
  ::int32_t _internal_request_type() const;
  void _internal_set_request_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:FKPasswordGrpc.AuthenticatePasswordRequestBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      88, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthenticatePasswordRequestBody& from_msg);
    ::google::protobuf::internal::ArenaStringPtr hashed_password_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_password_;
    ::int32_t request_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FKPasswordGrpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EncryptPasswordRequestBody

// int32 request_type = 1;
inline void EncryptPasswordRequestBody::clear_request_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_type_ = 0;
}
inline ::int32_t EncryptPasswordRequestBody::request_type() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.EncryptPasswordRequestBody.request_type)
  return _internal_request_type();
}
inline void EncryptPasswordRequestBody::set_request_type(::int32_t value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.EncryptPasswordRequestBody.request_type)
}
inline ::int32_t EncryptPasswordRequestBody::_internal_request_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_type_;
}
inline void EncryptPasswordRequestBody::_internal_set_request_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_type_ = value;
}

// string hashed_password = 2;
inline void EncryptPasswordRequestBody::clear_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.ClearToEmpty();
}
inline const std::string& EncryptPasswordRequestBody::hashed_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.EncryptPasswordRequestBody.hashed_password)
  return _internal_hashed_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptPasswordRequestBody::set_hashed_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.EncryptPasswordRequestBody.hashed_password)
}
inline std::string* EncryptPasswordRequestBody::mutable_hashed_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hashed_password();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.EncryptPasswordRequestBody.hashed_password)
  return _s;
}
inline const std::string& EncryptPasswordRequestBody::_internal_hashed_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hashed_password_.Get();
}
inline void EncryptPasswordRequestBody::_internal_set_hashed_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.Set(value, GetArena());
}
inline std::string* EncryptPasswordRequestBody::_internal_mutable_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hashed_password_.Mutable( GetArena());
}
inline std::string* EncryptPasswordRequestBody::release_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.EncryptPasswordRequestBody.hashed_password)
  return _impl_.hashed_password_.Release();
}
inline void EncryptPasswordRequestBody::set_allocated_hashed_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hashed_password_.IsDefault()) {
    _impl_.hashed_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.EncryptPasswordRequestBody.hashed_password)
}

// -------------------------------------------------------------------

// EncryptPasswordResponseBody

// int32 status_code = 1;
inline void EncryptPasswordResponseBody::clear_status_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = 0;
}
inline ::int32_t EncryptPasswordResponseBody::status_code() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.EncryptPasswordResponseBody.status_code)
  return _internal_status_code();
}
inline void EncryptPasswordResponseBody::set_status_code(::int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.EncryptPasswordResponseBody.status_code)
}
inline ::int32_t EncryptPasswordResponseBody::_internal_status_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_code_;
}
inline void EncryptPasswordResponseBody::_internal_set_status_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = value;
}

// string message = 2;
inline void EncryptPasswordResponseBody::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& EncryptPasswordResponseBody::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.EncryptPasswordResponseBody.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptPasswordResponseBody::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.EncryptPasswordResponseBody.message)
}
inline std::string* EncryptPasswordResponseBody::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.EncryptPasswordResponseBody.message)
  return _s;
}
inline const std::string& EncryptPasswordResponseBody::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void EncryptPasswordResponseBody::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* EncryptPasswordResponseBody::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* EncryptPasswordResponseBody::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.EncryptPasswordResponseBody.message)
  return _impl_.message_.Release();
}
inline void EncryptPasswordResponseBody::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.EncryptPasswordResponseBody.message)
}

// int32 request_type = 3;
inline void EncryptPasswordResponseBody::clear_request_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_type_ = 0;
}
inline ::int32_t EncryptPasswordResponseBody::request_type() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.EncryptPasswordResponseBody.request_type)
  return _internal_request_type();
}
inline void EncryptPasswordResponseBody::set_request_type(::int32_t value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.EncryptPasswordResponseBody.request_type)
}
inline ::int32_t EncryptPasswordResponseBody::_internal_request_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_type_;
}
inline void EncryptPasswordResponseBody::_internal_set_request_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_type_ = value;
}

// string encrypted_password = 4;
inline void EncryptPasswordResponseBody::clear_encrypted_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_password_.ClearToEmpty();
}
inline const std::string& EncryptPasswordResponseBody::encrypted_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.EncryptPasswordResponseBody.encrypted_password)
  return _internal_encrypted_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptPasswordResponseBody::set_encrypted_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.EncryptPasswordResponseBody.encrypted_password)
}
inline std::string* EncryptPasswordResponseBody::mutable_encrypted_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_password();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.EncryptPasswordResponseBody.encrypted_password)
  return _s;
}
inline const std::string& EncryptPasswordResponseBody::_internal_encrypted_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encrypted_password_.Get();
}
inline void EncryptPasswordResponseBody::_internal_set_encrypted_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_password_.Set(value, GetArena());
}
inline std::string* EncryptPasswordResponseBody::_internal_mutable_encrypted_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encrypted_password_.Mutable( GetArena());
}
inline std::string* EncryptPasswordResponseBody::release_encrypted_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.EncryptPasswordResponseBody.encrypted_password)
  return _impl_.encrypted_password_.Release();
}
inline void EncryptPasswordResponseBody::set_allocated_encrypted_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encrypted_password_.IsDefault()) {
    _impl_.encrypted_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.EncryptPasswordResponseBody.encrypted_password)
}

// string salt = 5;
inline void EncryptPasswordResponseBody::clear_salt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.salt_.ClearToEmpty();
}
inline const std::string& EncryptPasswordResponseBody::salt() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.EncryptPasswordResponseBody.salt)
  return _internal_salt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptPasswordResponseBody::set_salt(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.salt_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.EncryptPasswordResponseBody.salt)
}
inline std::string* EncryptPasswordResponseBody::mutable_salt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_salt();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.EncryptPasswordResponseBody.salt)
  return _s;
}
inline const std::string& EncryptPasswordResponseBody::_internal_salt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.salt_.Get();
}
inline void EncryptPasswordResponseBody::_internal_set_salt(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.salt_.Set(value, GetArena());
}
inline std::string* EncryptPasswordResponseBody::_internal_mutable_salt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.salt_.Mutable( GetArena());
}
inline std::string* EncryptPasswordResponseBody::release_salt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.EncryptPasswordResponseBody.salt)
  return _impl_.salt_.Release();
}
inline void EncryptPasswordResponseBody::set_allocated_salt(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.salt_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.salt_.IsDefault()) {
    _impl_.salt_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.EncryptPasswordResponseBody.salt)
}

// -------------------------------------------------------------------

// AuthenticatePasswordRequestBody

// int32 request_type = 1;
inline void AuthenticatePasswordRequestBody::clear_request_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_type_ = 0;
}
inline ::int32_t AuthenticatePasswordRequestBody::request_type() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.AuthenticatePasswordRequestBody.request_type)
  return _internal_request_type();
}
inline void AuthenticatePasswordRequestBody::set_request_type(::int32_t value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.AuthenticatePasswordRequestBody.request_type)
}
inline ::int32_t AuthenticatePasswordRequestBody::_internal_request_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_type_;
}
inline void AuthenticatePasswordRequestBody::_internal_set_request_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_type_ = value;
}

// string hashed_password = 2;
inline void AuthenticatePasswordRequestBody::clear_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.ClearToEmpty();
}
inline const std::string& AuthenticatePasswordRequestBody::hashed_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.AuthenticatePasswordRequestBody.hashed_password)
  return _internal_hashed_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticatePasswordRequestBody::set_hashed_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.AuthenticatePasswordRequestBody.hashed_password)
}
inline std::string* AuthenticatePasswordRequestBody::mutable_hashed_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hashed_password();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.AuthenticatePasswordRequestBody.hashed_password)
  return _s;
}
inline const std::string& AuthenticatePasswordRequestBody::_internal_hashed_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hashed_password_.Get();
}
inline void AuthenticatePasswordRequestBody::_internal_set_hashed_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.Set(value, GetArena());
}
inline std::string* AuthenticatePasswordRequestBody::_internal_mutable_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hashed_password_.Mutable( GetArena());
}
inline std::string* AuthenticatePasswordRequestBody::release_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.AuthenticatePasswordRequestBody.hashed_password)
  return _impl_.hashed_password_.Release();
}
inline void AuthenticatePasswordRequestBody::set_allocated_hashed_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hashed_password_.IsDefault()) {
    _impl_.hashed_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.AuthenticatePasswordRequestBody.hashed_password)
}

// string encrypted_password = 3;
inline void AuthenticatePasswordRequestBody::clear_encrypted_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_password_.ClearToEmpty();
}
inline const std::string& AuthenticatePasswordRequestBody::encrypted_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.AuthenticatePasswordRequestBody.encrypted_password)
  return _internal_encrypted_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticatePasswordRequestBody::set_encrypted_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.AuthenticatePasswordRequestBody.encrypted_password)
}
inline std::string* AuthenticatePasswordRequestBody::mutable_encrypted_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_password();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.AuthenticatePasswordRequestBody.encrypted_password)
  return _s;
}
inline const std::string& AuthenticatePasswordRequestBody::_internal_encrypted_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encrypted_password_.Get();
}
inline void AuthenticatePasswordRequestBody::_internal_set_encrypted_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_password_.Set(value, GetArena());
}
inline std::string* AuthenticatePasswordRequestBody::_internal_mutable_encrypted_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encrypted_password_.Mutable( GetArena());
}
inline std::string* AuthenticatePasswordRequestBody::release_encrypted_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.AuthenticatePasswordRequestBody.encrypted_password)
  return _impl_.encrypted_password_.Release();
}
inline void AuthenticatePasswordRequestBody::set_allocated_encrypted_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encrypted_password_.IsDefault()) {
    _impl_.encrypted_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.AuthenticatePasswordRequestBody.encrypted_password)
}

// -------------------------------------------------------------------

// AuthenticatePasswordResponseBody

// int32 status_code = 1;
inline void AuthenticatePasswordResponseBody::clear_status_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = 0;
}
inline ::int32_t AuthenticatePasswordResponseBody::status_code() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.AuthenticatePasswordResponseBody.status_code)
  return _internal_status_code();
}
inline void AuthenticatePasswordResponseBody::set_status_code(::int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.AuthenticatePasswordResponseBody.status_code)
}
inline ::int32_t AuthenticatePasswordResponseBody::_internal_status_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_code_;
}
inline void AuthenticatePasswordResponseBody::_internal_set_status_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = value;
}

// string message = 2;
inline void AuthenticatePasswordResponseBody::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AuthenticatePasswordResponseBody::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.AuthenticatePasswordResponseBody.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticatePasswordResponseBody::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.AuthenticatePasswordResponseBody.message)
}
inline std::string* AuthenticatePasswordResponseBody::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.AuthenticatePasswordResponseBody.message)
  return _s;
}
inline const std::string& AuthenticatePasswordResponseBody::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AuthenticatePasswordResponseBody::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* AuthenticatePasswordResponseBody::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* AuthenticatePasswordResponseBody::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.AuthenticatePasswordResponseBody.message)
  return _impl_.message_.Release();
}
inline void AuthenticatePasswordResponseBody::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.AuthenticatePasswordResponseBody.message)
}

// int32 request_type = 3;
inline void AuthenticatePasswordResponseBody::clear_request_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_type_ = 0;
}
inline ::int32_t AuthenticatePasswordResponseBody::request_type() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.AuthenticatePasswordResponseBody.request_type)
  return _internal_request_type();
}
inline void AuthenticatePasswordResponseBody::set_request_type(::int32_t value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.AuthenticatePasswordResponseBody.request_type)
}
inline ::int32_t AuthenticatePasswordResponseBody::_internal_request_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_type_;
}
inline void AuthenticatePasswordResponseBody::_internal_set_request_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace FKPasswordGrpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // FKPasswordGrpc_2eproto_2epb_2eh
