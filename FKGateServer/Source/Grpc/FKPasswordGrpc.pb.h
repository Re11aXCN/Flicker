// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: FKPasswordGrpc.proto
// Protobuf C++ Version: 5.29.3

#ifndef FKPasswordGrpc_2eproto_2epb_2eh
#define FKPasswordGrpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_FKPasswordGrpc_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_FKPasswordGrpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_FKPasswordGrpc_2eproto;
namespace FKPasswordGrpc {
class HashPasswordRequest;
struct HashPasswordRequestDefaultTypeInternal;
extern HashPasswordRequestDefaultTypeInternal _HashPasswordRequest_default_instance_;
class HashPasswordResponse;
struct HashPasswordResponseDefaultTypeInternal;
extern HashPasswordResponseDefaultTypeInternal _HashPasswordResponse_default_instance_;
class VerifyPasswordRequest;
struct VerifyPasswordRequestDefaultTypeInternal;
extern VerifyPasswordRequestDefaultTypeInternal _VerifyPasswordRequest_default_instance_;
class VerifyPasswordResponse;
struct VerifyPasswordResponseDefaultTypeInternal;
extern VerifyPasswordResponseDefaultTypeInternal _VerifyPasswordResponse_default_instance_;
}  // namespace FKPasswordGrpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace FKPasswordGrpc {

// ===================================================================


// -------------------------------------------------------------------

class VerifyPasswordResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FKPasswordGrpc.VerifyPasswordResponse) */ {
 public:
  inline VerifyPasswordResponse() : VerifyPasswordResponse(nullptr) {}
  ~VerifyPasswordResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VerifyPasswordResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VerifyPasswordResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VerifyPasswordResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline VerifyPasswordResponse(const VerifyPasswordResponse& from) : VerifyPasswordResponse(nullptr, from) {}
  inline VerifyPasswordResponse(VerifyPasswordResponse&& from) noexcept
      : VerifyPasswordResponse(nullptr, std::move(from)) {}
  inline VerifyPasswordResponse& operator=(const VerifyPasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyPasswordResponse& operator=(VerifyPasswordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyPasswordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyPasswordResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyPasswordResponse*>(
        &_VerifyPasswordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(VerifyPasswordResponse& a, VerifyPasswordResponse& b) { a.Swap(&b); }
  inline void Swap(VerifyPasswordResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyPasswordResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyPasswordResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VerifyPasswordResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VerifyPasswordResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VerifyPasswordResponse& from) { VerifyPasswordResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VerifyPasswordResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FKPasswordGrpc.VerifyPasswordResponse"; }

 protected:
  explicit VerifyPasswordResponse(::google::protobuf::Arena* arena);
  VerifyPasswordResponse(::google::protobuf::Arena* arena, const VerifyPasswordResponse& from);
  VerifyPasswordResponse(::google::protobuf::Arena* arena, VerifyPasswordResponse&& from) noexcept
      : VerifyPasswordResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
    kIsValidFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // int32 status_code = 1;
  void clear_status_code() ;
  ::int32_t status_code() const;
  void set_status_code(::int32_t value);

  private:
  ::int32_t _internal_status_code() const;
  void _internal_set_status_code(::int32_t value);

  public:
  // bool is_valid = 3;
  void clear_is_valid() ;
  bool is_valid() const;
  void set_is_valid(bool value);

  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:FKPasswordGrpc.VerifyPasswordResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VerifyPasswordResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::int32_t status_code_;
    bool is_valid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FKPasswordGrpc_2eproto;
};
// -------------------------------------------------------------------

class VerifyPasswordRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FKPasswordGrpc.VerifyPasswordRequest) */ {
 public:
  inline VerifyPasswordRequest() : VerifyPasswordRequest(nullptr) {}
  ~VerifyPasswordRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VerifyPasswordRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VerifyPasswordRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VerifyPasswordRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline VerifyPasswordRequest(const VerifyPasswordRequest& from) : VerifyPasswordRequest(nullptr, from) {}
  inline VerifyPasswordRequest(VerifyPasswordRequest&& from) noexcept
      : VerifyPasswordRequest(nullptr, std::move(from)) {}
  inline VerifyPasswordRequest& operator=(const VerifyPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyPasswordRequest& operator=(VerifyPasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyPasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyPasswordRequest*>(
        &_VerifyPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(VerifyPasswordRequest& a, VerifyPasswordRequest& b) { a.Swap(&b); }
  inline void Swap(VerifyPasswordRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyPasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyPasswordRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VerifyPasswordRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VerifyPasswordRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VerifyPasswordRequest& from) { VerifyPasswordRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VerifyPasswordRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FKPasswordGrpc.VerifyPasswordRequest"; }

 protected:
  explicit VerifyPasswordRequest(::google::protobuf::Arena* arena);
  VerifyPasswordRequest(::google::protobuf::Arena* arena, const VerifyPasswordRequest& from);
  VerifyPasswordRequest(::google::protobuf::Arena* arena, VerifyPasswordRequest&& from) noexcept
      : VerifyPasswordRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPasswordFieldNumber = 1,
    kHashedPasswordFieldNumber = 2,
  };
  // string password = 1;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string hashed_password = 2;
  void clear_hashed_password() ;
  const std::string& hashed_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hashed_password(Arg_&& arg, Args_... args);
  std::string* mutable_hashed_password();
  PROTOBUF_NODISCARD std::string* release_hashed_password();
  void set_allocated_hashed_password(std::string* value);

  private:
  const std::string& _internal_hashed_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashed_password(
      const std::string& value);
  std::string* _internal_mutable_hashed_password();

  public:
  // @@protoc_insertion_point(class_scope:FKPasswordGrpc.VerifyPasswordRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VerifyPasswordRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr hashed_password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FKPasswordGrpc_2eproto;
};
// -------------------------------------------------------------------

class HashPasswordResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FKPasswordGrpc.HashPasswordResponse) */ {
 public:
  inline HashPasswordResponse() : HashPasswordResponse(nullptr) {}
  ~HashPasswordResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HashPasswordResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HashPasswordResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HashPasswordResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HashPasswordResponse(const HashPasswordResponse& from) : HashPasswordResponse(nullptr, from) {}
  inline HashPasswordResponse(HashPasswordResponse&& from) noexcept
      : HashPasswordResponse(nullptr, std::move(from)) {}
  inline HashPasswordResponse& operator=(const HashPasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashPasswordResponse& operator=(HashPasswordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashPasswordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashPasswordResponse* internal_default_instance() {
    return reinterpret_cast<const HashPasswordResponse*>(
        &_HashPasswordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(HashPasswordResponse& a, HashPasswordResponse& b) { a.Swap(&b); }
  inline void Swap(HashPasswordResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashPasswordResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashPasswordResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HashPasswordResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HashPasswordResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HashPasswordResponse& from) { HashPasswordResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HashPasswordResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FKPasswordGrpc.HashPasswordResponse"; }

 protected:
  explicit HashPasswordResponse(::google::protobuf::Arena* arena);
  HashPasswordResponse(::google::protobuf::Arena* arena, const HashPasswordResponse& from);
  HashPasswordResponse(::google::protobuf::Arena* arena, HashPasswordResponse&& from) noexcept
      : HashPasswordResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kHashedPasswordFieldNumber = 3,
    kSaltFieldNumber = 4,
    kStatusCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string hashed_password = 3;
  void clear_hashed_password() ;
  const std::string& hashed_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hashed_password(Arg_&& arg, Args_... args);
  std::string* mutable_hashed_password();
  PROTOBUF_NODISCARD std::string* release_hashed_password();
  void set_allocated_hashed_password(std::string* value);

  private:
  const std::string& _internal_hashed_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashed_password(
      const std::string& value);
  std::string* _internal_mutable_hashed_password();

  public:
  // string salt = 4;
  void clear_salt() ;
  const std::string& salt() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_salt(Arg_&& arg, Args_... args);
  std::string* mutable_salt();
  PROTOBUF_NODISCARD std::string* release_salt();
  void set_allocated_salt(std::string* value);

  private:
  const std::string& _internal_salt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt(
      const std::string& value);
  std::string* _internal_mutable_salt();

  public:
  // int32 status_code = 1;
  void clear_status_code() ;
  ::int32_t status_code() const;
  void set_status_code(::int32_t value);

  private:
  ::int32_t _internal_status_code() const;
  void _internal_set_status_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:FKPasswordGrpc.HashPasswordResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HashPasswordResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr hashed_password_;
    ::google::protobuf::internal::ArenaStringPtr salt_;
    ::int32_t status_code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FKPasswordGrpc_2eproto;
};
// -------------------------------------------------------------------

class HashPasswordRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FKPasswordGrpc.HashPasswordRequest) */ {
 public:
  inline HashPasswordRequest() : HashPasswordRequest(nullptr) {}
  ~HashPasswordRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HashPasswordRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HashPasswordRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HashPasswordRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HashPasswordRequest(const HashPasswordRequest& from) : HashPasswordRequest(nullptr, from) {}
  inline HashPasswordRequest(HashPasswordRequest&& from) noexcept
      : HashPasswordRequest(nullptr, std::move(from)) {}
  inline HashPasswordRequest& operator=(const HashPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashPasswordRequest& operator=(HashPasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashPasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const HashPasswordRequest*>(
        &_HashPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(HashPasswordRequest& a, HashPasswordRequest& b) { a.Swap(&b); }
  inline void Swap(HashPasswordRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashPasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashPasswordRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HashPasswordRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HashPasswordRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HashPasswordRequest& from) { HashPasswordRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HashPasswordRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FKPasswordGrpc.HashPasswordRequest"; }

 protected:
  explicit HashPasswordRequest(::google::protobuf::Arena* arena);
  HashPasswordRequest(::google::protobuf::Arena* arena, const HashPasswordRequest& from);
  HashPasswordRequest(::google::protobuf::Arena* arena, HashPasswordRequest&& from) noexcept
      : HashPasswordRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPasswordFieldNumber = 1,
  };
  // string password = 1;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:FKPasswordGrpc.HashPasswordRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HashPasswordRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FKPasswordGrpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HashPasswordRequest

// string password = 1;
inline void HashPasswordRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& HashPasswordRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.HashPasswordRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HashPasswordRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.HashPasswordRequest.password)
}
inline std::string* HashPasswordRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.HashPasswordRequest.password)
  return _s;
}
inline const std::string& HashPasswordRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void HashPasswordRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* HashPasswordRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* HashPasswordRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.HashPasswordRequest.password)
  return _impl_.password_.Release();
}
inline void HashPasswordRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.HashPasswordRequest.password)
}

// -------------------------------------------------------------------

// HashPasswordResponse

// int32 status_code = 1;
inline void HashPasswordResponse::clear_status_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = 0;
}
inline ::int32_t HashPasswordResponse::status_code() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.HashPasswordResponse.status_code)
  return _internal_status_code();
}
inline void HashPasswordResponse::set_status_code(::int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.HashPasswordResponse.status_code)
}
inline ::int32_t HashPasswordResponse::_internal_status_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_code_;
}
inline void HashPasswordResponse::_internal_set_status_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = value;
}

// string message = 2;
inline void HashPasswordResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& HashPasswordResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.HashPasswordResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HashPasswordResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.HashPasswordResponse.message)
}
inline std::string* HashPasswordResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.HashPasswordResponse.message)
  return _s;
}
inline const std::string& HashPasswordResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void HashPasswordResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* HashPasswordResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* HashPasswordResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.HashPasswordResponse.message)
  return _impl_.message_.Release();
}
inline void HashPasswordResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.HashPasswordResponse.message)
}

// string hashed_password = 3;
inline void HashPasswordResponse::clear_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.ClearToEmpty();
}
inline const std::string& HashPasswordResponse::hashed_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.HashPasswordResponse.hashed_password)
  return _internal_hashed_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HashPasswordResponse::set_hashed_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.HashPasswordResponse.hashed_password)
}
inline std::string* HashPasswordResponse::mutable_hashed_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hashed_password();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.HashPasswordResponse.hashed_password)
  return _s;
}
inline const std::string& HashPasswordResponse::_internal_hashed_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hashed_password_.Get();
}
inline void HashPasswordResponse::_internal_set_hashed_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.Set(value, GetArena());
}
inline std::string* HashPasswordResponse::_internal_mutable_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hashed_password_.Mutable( GetArena());
}
inline std::string* HashPasswordResponse::release_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.HashPasswordResponse.hashed_password)
  return _impl_.hashed_password_.Release();
}
inline void HashPasswordResponse::set_allocated_hashed_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hashed_password_.IsDefault()) {
    _impl_.hashed_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.HashPasswordResponse.hashed_password)
}

// string salt = 4;
inline void HashPasswordResponse::clear_salt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.salt_.ClearToEmpty();
}
inline const std::string& HashPasswordResponse::salt() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.HashPasswordResponse.salt)
  return _internal_salt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HashPasswordResponse::set_salt(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.salt_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.HashPasswordResponse.salt)
}
inline std::string* HashPasswordResponse::mutable_salt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_salt();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.HashPasswordResponse.salt)
  return _s;
}
inline const std::string& HashPasswordResponse::_internal_salt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.salt_.Get();
}
inline void HashPasswordResponse::_internal_set_salt(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.salt_.Set(value, GetArena());
}
inline std::string* HashPasswordResponse::_internal_mutable_salt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.salt_.Mutable( GetArena());
}
inline std::string* HashPasswordResponse::release_salt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.HashPasswordResponse.salt)
  return _impl_.salt_.Release();
}
inline void HashPasswordResponse::set_allocated_salt(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.salt_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.salt_.IsDefault()) {
    _impl_.salt_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.HashPasswordResponse.salt)
}

// -------------------------------------------------------------------

// VerifyPasswordRequest

// string password = 1;
inline void VerifyPasswordRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& VerifyPasswordRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.VerifyPasswordRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyPasswordRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.VerifyPasswordRequest.password)
}
inline std::string* VerifyPasswordRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.VerifyPasswordRequest.password)
  return _s;
}
inline const std::string& VerifyPasswordRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void VerifyPasswordRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* VerifyPasswordRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* VerifyPasswordRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.VerifyPasswordRequest.password)
  return _impl_.password_.Release();
}
inline void VerifyPasswordRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.VerifyPasswordRequest.password)
}

// string hashed_password = 2;
inline void VerifyPasswordRequest::clear_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.ClearToEmpty();
}
inline const std::string& VerifyPasswordRequest::hashed_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.VerifyPasswordRequest.hashed_password)
  return _internal_hashed_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyPasswordRequest::set_hashed_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.VerifyPasswordRequest.hashed_password)
}
inline std::string* VerifyPasswordRequest::mutable_hashed_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hashed_password();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.VerifyPasswordRequest.hashed_password)
  return _s;
}
inline const std::string& VerifyPasswordRequest::_internal_hashed_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hashed_password_.Get();
}
inline void VerifyPasswordRequest::_internal_set_hashed_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.Set(value, GetArena());
}
inline std::string* VerifyPasswordRequest::_internal_mutable_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hashed_password_.Mutable( GetArena());
}
inline std::string* VerifyPasswordRequest::release_hashed_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.VerifyPasswordRequest.hashed_password)
  return _impl_.hashed_password_.Release();
}
inline void VerifyPasswordRequest::set_allocated_hashed_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hashed_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hashed_password_.IsDefault()) {
    _impl_.hashed_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.VerifyPasswordRequest.hashed_password)
}

// -------------------------------------------------------------------

// VerifyPasswordResponse

// int32 status_code = 1;
inline void VerifyPasswordResponse::clear_status_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = 0;
}
inline ::int32_t VerifyPasswordResponse::status_code() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.VerifyPasswordResponse.status_code)
  return _internal_status_code();
}
inline void VerifyPasswordResponse::set_status_code(::int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.VerifyPasswordResponse.status_code)
}
inline ::int32_t VerifyPasswordResponse::_internal_status_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_code_;
}
inline void VerifyPasswordResponse::_internal_set_status_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = value;
}

// string message = 2;
inline void VerifyPasswordResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& VerifyPasswordResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.VerifyPasswordResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyPasswordResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.VerifyPasswordResponse.message)
}
inline std::string* VerifyPasswordResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:FKPasswordGrpc.VerifyPasswordResponse.message)
  return _s;
}
inline const std::string& VerifyPasswordResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void VerifyPasswordResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* VerifyPasswordResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* VerifyPasswordResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FKPasswordGrpc.VerifyPasswordResponse.message)
  return _impl_.message_.Release();
}
inline void VerifyPasswordResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FKPasswordGrpc.VerifyPasswordResponse.message)
}

// bool is_valid = 3;
inline void VerifyPasswordResponse::clear_is_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_valid_ = false;
}
inline bool VerifyPasswordResponse::is_valid() const {
  // @@protoc_insertion_point(field_get:FKPasswordGrpc.VerifyPasswordResponse.is_valid)
  return _internal_is_valid();
}
inline void VerifyPasswordResponse::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:FKPasswordGrpc.VerifyPasswordResponse.is_valid)
}
inline bool VerifyPasswordResponse::_internal_is_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_valid_;
}
inline void VerifyPasswordResponse::_internal_set_is_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_valid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace FKPasswordGrpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // FKPasswordGrpc_2eproto_2epb_2eh
