// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FKGrpcService.proto

#include "FKGrpcService.pb.h"
#include "FKGrpcService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace FKGrpcService {

static const char* Verification_method_names[] = {
  "/FKGrpcService.Verification/GetVerifyCode",
};

std::unique_ptr< Verification::Stub> Verification::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Verification::Stub> stub(new Verification::Stub(channel, options));
  return stub;
}

Verification::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVerifyCode_(Verification_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Verification::Stub::GetVerifyCode(::grpc::ClientContext* context, const ::FKGrpcService::VerifyCodeRequestBody& request, ::FKGrpcService::VerifyCodeResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FKGrpcService::VerifyCodeRequestBody, ::FKGrpcService::VerifyCodeResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVerifyCode_, context, request, response);
}

void Verification::Stub::async::GetVerifyCode(::grpc::ClientContext* context, const ::FKGrpcService::VerifyCodeRequestBody* request, ::FKGrpcService::VerifyCodeResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FKGrpcService::VerifyCodeRequestBody, ::FKGrpcService::VerifyCodeResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerifyCode_, context, request, response, std::move(f));
}

void Verification::Stub::async::GetVerifyCode(::grpc::ClientContext* context, const ::FKGrpcService::VerifyCodeRequestBody* request, ::FKGrpcService::VerifyCodeResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerifyCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FKGrpcService::VerifyCodeResponseBody>* Verification::Stub::PrepareAsyncGetVerifyCodeRaw(::grpc::ClientContext* context, const ::FKGrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FKGrpcService::VerifyCodeResponseBody, ::FKGrpcService::VerifyCodeRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVerifyCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FKGrpcService::VerifyCodeResponseBody>* Verification::Stub::AsyncGetVerifyCodeRaw(::grpc::ClientContext* context, const ::FKGrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVerifyCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

Verification::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Verification_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Verification::Service, ::FKGrpcService::VerifyCodeRequestBody, ::FKGrpcService::VerifyCodeResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Verification::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FKGrpcService::VerifyCodeRequestBody* req,
             ::FKGrpcService::VerifyCodeResponseBody* resp) {
               return service->GetVerifyCode(ctx, req, resp);
             }, this)));
}

Verification::Service::~Service() {
}

::grpc::Status Verification::Service::GetVerifyCode(::grpc::ServerContext* context, const ::FKGrpcService::VerifyCodeRequestBody* request, ::FKGrpcService::VerifyCodeResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Encryption_method_names[] = {
  "/FKGrpcService.Encryption/EncryptPassword",
};

std::unique_ptr< Encryption::Stub> Encryption::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Encryption::Stub> stub(new Encryption::Stub(channel, options));
  return stub;
}

Encryption::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EncryptPassword_(Encryption_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Encryption::Stub::EncryptPassword(::grpc::ClientContext* context, const ::FKGrpcService::EncryptPasswordRequestBody& request, ::FKGrpcService::EncryptPasswordResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FKGrpcService::EncryptPasswordRequestBody, ::FKGrpcService::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EncryptPassword_, context, request, response);
}

void Encryption::Stub::async::EncryptPassword(::grpc::ClientContext* context, const ::FKGrpcService::EncryptPasswordRequestBody* request, ::FKGrpcService::EncryptPasswordResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FKGrpcService::EncryptPasswordRequestBody, ::FKGrpcService::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncryptPassword_, context, request, response, std::move(f));
}

void Encryption::Stub::async::EncryptPassword(::grpc::ClientContext* context, const ::FKGrpcService::EncryptPasswordRequestBody* request, ::FKGrpcService::EncryptPasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncryptPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FKGrpcService::EncryptPasswordResponseBody>* Encryption::Stub::PrepareAsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::FKGrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FKGrpcService::EncryptPasswordResponseBody, ::FKGrpcService::EncryptPasswordRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EncryptPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FKGrpcService::EncryptPasswordResponseBody>* Encryption::Stub::AsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::FKGrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncryptPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

Encryption::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Encryption_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Encryption::Service, ::FKGrpcService::EncryptPasswordRequestBody, ::FKGrpcService::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Encryption::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FKGrpcService::EncryptPasswordRequestBody* req,
             ::FKGrpcService::EncryptPasswordResponseBody* resp) {
               return service->EncryptPassword(ctx, req, resp);
             }, this)));
}

Encryption::Service::~Service() {
}

::grpc::Status Encryption::Service::EncryptPassword(::grpc::ServerContext* context, const ::FKGrpcService::EncryptPasswordRequestBody* request, ::FKGrpcService::EncryptPasswordResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Authentication_method_names[] = {
  "/FKGrpcService.Authentication/AuthenticatePwdReset",
};

std::unique_ptr< Authentication::Stub> Authentication::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Authentication::Stub> stub(new Authentication::Stub(channel, options));
  return stub;
}

Authentication::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AuthenticatePwdReset_(Authentication_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Authentication::Stub::AuthenticatePwdReset(::grpc::ClientContext* context, const ::FKGrpcService::AuthenticatePwdResetRequestBody& request, ::FKGrpcService::AuthenticatePwdResetResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FKGrpcService::AuthenticatePwdResetRequestBody, ::FKGrpcService::AuthenticatePwdResetResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthenticatePwdReset_, context, request, response);
}

void Authentication::Stub::async::AuthenticatePwdReset(::grpc::ClientContext* context, const ::FKGrpcService::AuthenticatePwdResetRequestBody* request, ::FKGrpcService::AuthenticatePwdResetResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FKGrpcService::AuthenticatePwdResetRequestBody, ::FKGrpcService::AuthenticatePwdResetResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticatePwdReset_, context, request, response, std::move(f));
}

void Authentication::Stub::async::AuthenticatePwdReset(::grpc::ClientContext* context, const ::FKGrpcService::AuthenticatePwdResetRequestBody* request, ::FKGrpcService::AuthenticatePwdResetResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticatePwdReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FKGrpcService::AuthenticatePwdResetResponseBody>* Authentication::Stub::PrepareAsyncAuthenticatePwdResetRaw(::grpc::ClientContext* context, const ::FKGrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FKGrpcService::AuthenticatePwdResetResponseBody, ::FKGrpcService::AuthenticatePwdResetRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthenticatePwdReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FKGrpcService::AuthenticatePwdResetResponseBody>* Authentication::Stub::AsyncAuthenticatePwdResetRaw(::grpc::ClientContext* context, const ::FKGrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticatePwdResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

Authentication::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authentication_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authentication::Service, ::FKGrpcService::AuthenticatePwdResetRequestBody, ::FKGrpcService::AuthenticatePwdResetResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Authentication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FKGrpcService::AuthenticatePwdResetRequestBody* req,
             ::FKGrpcService::AuthenticatePwdResetResponseBody* resp) {
               return service->AuthenticatePwdReset(ctx, req, resp);
             }, this)));
}

Authentication::Service::~Service() {
}

::grpc::Status Authentication::Service::AuthenticatePwdReset(::grpc::ServerContext* context, const ::FKGrpcService::AuthenticatePwdResetRequestBody* request, ::FKGrpcService::AuthenticatePwdResetResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace FKGrpcService

