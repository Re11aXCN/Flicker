// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_service.proto
#ifndef GRPC_grpc_5fservice_2eproto__INCLUDED
#define GRPC_grpc_5fservice_2eproto__INCLUDED

#include "grpc_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace GrpcService {

class Verification final {
 public:
  static constexpr char const* service_full_name() {
    return "GrpcService.Verification";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::GrpcService::VerifyCodeResponseBody* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::VerifyCodeResponseBody>> AsyncGetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::VerifyCodeResponseBody>>(AsyncGetVerifyCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::VerifyCodeResponseBody>> PrepareAsyncGetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::VerifyCodeResponseBody>>(PrepareAsyncGetVerifyCodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::VerifyCodeResponseBody>* AsyncGetVerifyCodeRaw(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::VerifyCodeResponseBody>* PrepareAsyncGetVerifyCodeRaw(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::GrpcService::VerifyCodeResponseBody* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::VerifyCodeResponseBody>> AsyncGetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::VerifyCodeResponseBody>>(AsyncGetVerifyCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::VerifyCodeResponseBody>> PrepareAsyncGetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::VerifyCodeResponseBody>>(PrepareAsyncGetVerifyCodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response, std::function<void(::grpc::Status)>) override;
      void GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GrpcService::VerifyCodeResponseBody>* AsyncGetVerifyCodeRaw(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcService::VerifyCodeResponseBody>* PrepareAsyncGetVerifyCodeRaw(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetVerifyCode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetVerifyCode(::grpc::ServerContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVerifyCode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerifyCode(::grpc::ServerContext* /*context*/, const ::GrpcService::VerifyCodeRequestBody* /*request*/, ::GrpcService::VerifyCodeResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVerifyCode(::grpc::ServerContext* context, ::GrpcService::VerifyCodeRequestBody* request, ::grpc::ServerAsyncResponseWriter< ::GrpcService::VerifyCodeResponseBody>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetVerifyCode<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetVerifyCode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GrpcService::VerifyCodeRequestBody, ::GrpcService::VerifyCodeResponseBody>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response) { return this->GetVerifyCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetVerifyCode(
        ::grpc::MessageAllocator< ::GrpcService::VerifyCodeRequestBody, ::GrpcService::VerifyCodeResponseBody>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GrpcService::VerifyCodeRequestBody, ::GrpcService::VerifyCodeResponseBody>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerifyCode(::grpc::ServerContext* /*context*/, const ::GrpcService::VerifyCodeRequestBody* /*request*/, ::GrpcService::VerifyCodeResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVerifyCode(
      ::grpc::CallbackServerContext* /*context*/, const ::GrpcService::VerifyCodeRequestBody* /*request*/, ::GrpcService::VerifyCodeResponseBody* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetVerifyCode<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVerifyCode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerifyCode(::grpc::ServerContext* /*context*/, const ::GrpcService::VerifyCodeRequestBody* /*request*/, ::GrpcService::VerifyCodeResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVerifyCode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerifyCode(::grpc::ServerContext* /*context*/, const ::GrpcService::VerifyCodeRequestBody* /*request*/, ::GrpcService::VerifyCodeResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVerifyCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetVerifyCode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVerifyCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerifyCode(::grpc::ServerContext* /*context*/, const ::GrpcService::VerifyCodeRequestBody* /*request*/, ::GrpcService::VerifyCodeResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVerifyCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVerifyCode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GrpcService::VerifyCodeRequestBody, ::GrpcService::VerifyCodeResponseBody>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GrpcService::VerifyCodeRequestBody, ::GrpcService::VerifyCodeResponseBody>* streamer) {
                       return this->StreamedGetVerifyCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVerifyCode(::grpc::ServerContext* /*context*/, const ::GrpcService::VerifyCodeRequestBody* /*request*/, ::GrpcService::VerifyCodeResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVerifyCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GrpcService::VerifyCodeRequestBody,::GrpcService::VerifyCodeResponseBody>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetVerifyCode<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetVerifyCode<Service > StreamedService;
};

class Encryption final {
 public:
  static constexpr char const* service_full_name() {
    return "GrpcService.Encryption";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::GrpcService::EncryptPasswordResponseBody* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::EncryptPasswordResponseBody>> AsyncEncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::EncryptPasswordResponseBody>>(AsyncEncryptPasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::EncryptPasswordResponseBody>> PrepareAsyncEncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::EncryptPasswordResponseBody>>(PrepareAsyncEncryptPasswordRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::EncryptPasswordResponseBody>* AsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::EncryptPasswordResponseBody>* PrepareAsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::GrpcService::EncryptPasswordResponseBody* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::EncryptPasswordResponseBody>> AsyncEncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::EncryptPasswordResponseBody>>(AsyncEncryptPasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::EncryptPasswordResponseBody>> PrepareAsyncEncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::EncryptPasswordResponseBody>>(PrepareAsyncEncryptPasswordRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response, std::function<void(::grpc::Status)>) override;
      void EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GrpcService::EncryptPasswordResponseBody>* AsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcService::EncryptPasswordResponseBody>* PrepareAsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_EncryptPassword_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status EncryptPassword(::grpc::ServerContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::GrpcService::EncryptPasswordRequestBody* /*request*/, ::GrpcService::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptPassword(::grpc::ServerContext* context, ::GrpcService::EncryptPasswordRequestBody* request, ::grpc::ServerAsyncResponseWriter< ::GrpcService::EncryptPasswordResponseBody>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EncryptPassword<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GrpcService::EncryptPasswordRequestBody, ::GrpcService::EncryptPasswordResponseBody>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response) { return this->EncryptPassword(context, request, response); }));}
    void SetMessageAllocatorFor_EncryptPassword(
        ::grpc::MessageAllocator< ::GrpcService::EncryptPasswordRequestBody, ::GrpcService::EncryptPasswordResponseBody>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GrpcService::EncryptPasswordRequestBody, ::GrpcService::EncryptPasswordResponseBody>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::GrpcService::EncryptPasswordRequestBody* /*request*/, ::GrpcService::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EncryptPassword(
      ::grpc::CallbackServerContext* /*context*/, const ::GrpcService::EncryptPasswordRequestBody* /*request*/, ::GrpcService::EncryptPasswordResponseBody* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_EncryptPassword<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::GrpcService::EncryptPasswordRequestBody* /*request*/, ::GrpcService::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::GrpcService::EncryptPasswordRequestBody* /*request*/, ::GrpcService::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptPassword(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EncryptPassword(context, request, response); }));
    }
    ~WithRawCallbackMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::GrpcService::EncryptPasswordRequestBody* /*request*/, ::GrpcService::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EncryptPassword(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EncryptPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EncryptPassword() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GrpcService::EncryptPasswordRequestBody, ::GrpcService::EncryptPasswordResponseBody>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GrpcService::EncryptPasswordRequestBody, ::GrpcService::EncryptPasswordResponseBody>* streamer) {
                       return this->StreamedEncryptPassword(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EncryptPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncryptPassword(::grpc::ServerContext* /*context*/, const ::GrpcService::EncryptPasswordRequestBody* /*request*/, ::GrpcService::EncryptPasswordResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncryptPassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GrpcService::EncryptPasswordRequestBody,::GrpcService::EncryptPasswordResponseBody>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EncryptPassword<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_EncryptPassword<Service > StreamedService;
};

class Authentication final {
 public:
  static constexpr char const* service_full_name() {
    return "GrpcService.Authentication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::GrpcService::AuthenticatePwdResetResponseBody* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::AuthenticatePwdResetResponseBody>> AsyncAuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::AuthenticatePwdResetResponseBody>>(AsyncAuthenticatePwdResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::AuthenticatePwdResetResponseBody>> PrepareAsyncAuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::AuthenticatePwdResetResponseBody>>(PrepareAsyncAuthenticatePwdResetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::AuthenticatePwdResetResponseBody>* AsyncAuthenticatePwdResetRaw(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::AuthenticatePwdResetResponseBody>* PrepareAsyncAuthenticatePwdResetRaw(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::GrpcService::AuthenticatePwdResetResponseBody* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::AuthenticatePwdResetResponseBody>> AsyncAuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::AuthenticatePwdResetResponseBody>>(AsyncAuthenticatePwdResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::AuthenticatePwdResetResponseBody>> PrepareAsyncAuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::AuthenticatePwdResetResponseBody>>(PrepareAsyncAuthenticatePwdResetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response, std::function<void(::grpc::Status)>) override;
      void AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GrpcService::AuthenticatePwdResetResponseBody>* AsyncAuthenticatePwdResetRaw(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcService::AuthenticatePwdResetResponseBody>* PrepareAsyncAuthenticatePwdResetRaw(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AuthenticatePwdReset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AuthenticatePwdReset(::grpc::ServerContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AuthenticatePwdReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuthenticatePwdReset() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AuthenticatePwdReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePwdReset(::grpc::ServerContext* /*context*/, const ::GrpcService::AuthenticatePwdResetRequestBody* /*request*/, ::GrpcService::AuthenticatePwdResetResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticatePwdReset(::grpc::ServerContext* context, ::GrpcService::AuthenticatePwdResetRequestBody* request, ::grpc::ServerAsyncResponseWriter< ::GrpcService::AuthenticatePwdResetResponseBody>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AuthenticatePwdReset<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AuthenticatePwdReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuthenticatePwdReset() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GrpcService::AuthenticatePwdResetRequestBody, ::GrpcService::AuthenticatePwdResetResponseBody>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response) { return this->AuthenticatePwdReset(context, request, response); }));}
    void SetMessageAllocatorFor_AuthenticatePwdReset(
        ::grpc::MessageAllocator< ::GrpcService::AuthenticatePwdResetRequestBody, ::GrpcService::AuthenticatePwdResetResponseBody>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GrpcService::AuthenticatePwdResetRequestBody, ::GrpcService::AuthenticatePwdResetResponseBody>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuthenticatePwdReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePwdReset(::grpc::ServerContext* /*context*/, const ::GrpcService::AuthenticatePwdResetRequestBody* /*request*/, ::GrpcService::AuthenticatePwdResetResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthenticatePwdReset(
      ::grpc::CallbackServerContext* /*context*/, const ::GrpcService::AuthenticatePwdResetRequestBody* /*request*/, ::GrpcService::AuthenticatePwdResetResponseBody* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AuthenticatePwdReset<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AuthenticatePwdReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuthenticatePwdReset() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AuthenticatePwdReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePwdReset(::grpc::ServerContext* /*context*/, const ::GrpcService::AuthenticatePwdResetRequestBody* /*request*/, ::GrpcService::AuthenticatePwdResetResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuthenticatePwdReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuthenticatePwdReset() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AuthenticatePwdReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePwdReset(::grpc::ServerContext* /*context*/, const ::GrpcService::AuthenticatePwdResetRequestBody* /*request*/, ::GrpcService::AuthenticatePwdResetResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticatePwdReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuthenticatePwdReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuthenticatePwdReset() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuthenticatePwdReset(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuthenticatePwdReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticatePwdReset(::grpc::ServerContext* /*context*/, const ::GrpcService::AuthenticatePwdResetRequestBody* /*request*/, ::GrpcService::AuthenticatePwdResetResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthenticatePwdReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuthenticatePwdReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuthenticatePwdReset() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GrpcService::AuthenticatePwdResetRequestBody, ::GrpcService::AuthenticatePwdResetResponseBody>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GrpcService::AuthenticatePwdResetRequestBody, ::GrpcService::AuthenticatePwdResetResponseBody>* streamer) {
                       return this->StreamedAuthenticatePwdReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuthenticatePwdReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuthenticatePwdReset(::grpc::ServerContext* /*context*/, const ::GrpcService::AuthenticatePwdResetRequestBody* /*request*/, ::GrpcService::AuthenticatePwdResetResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticatePwdReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GrpcService::AuthenticatePwdResetRequestBody,::GrpcService::AuthenticatePwdResetResponseBody>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AuthenticatePwdReset<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AuthenticatePwdReset<Service > StreamedService;
};

class Interaction final {
 public:
  static constexpr char const* service_full_name() {
    return "GrpcService.Interaction";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // rpc SendLoginMessage (SendLoginMessageRequestBody) returns (SendLoginMessageResponseBody) {}
    virtual ::grpc::Status GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::GrpcService::GetChatServerAddressResponseBody* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::GetChatServerAddressResponseBody>> AsyncGetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::GetChatServerAddressResponseBody>>(AsyncGetChatServerAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::GetChatServerAddressResponseBody>> PrepareAsyncGetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::GetChatServerAddressResponseBody>>(PrepareAsyncGetChatServerAddressRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // rpc SendLoginMessage (SendLoginMessageRequestBody) returns (SendLoginMessageResponseBody) {}
      virtual void GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::GetChatServerAddressResponseBody>* AsyncGetChatServerAddressRaw(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcService::GetChatServerAddressResponseBody>* PrepareAsyncGetChatServerAddressRaw(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::GrpcService::GetChatServerAddressResponseBody* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::GetChatServerAddressResponseBody>> AsyncGetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::GetChatServerAddressResponseBody>>(AsyncGetChatServerAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::GetChatServerAddressResponseBody>> PrepareAsyncGetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcService::GetChatServerAddressResponseBody>>(PrepareAsyncGetChatServerAddressRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response, std::function<void(::grpc::Status)>) override;
      void GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GrpcService::GetChatServerAddressResponseBody>* AsyncGetChatServerAddressRaw(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcService::GetChatServerAddressResponseBody>* PrepareAsyncGetChatServerAddressRaw(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetChatServerAddress_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // rpc SendLoginMessage (SendLoginMessageRequestBody) returns (SendLoginMessageResponseBody) {}
    virtual ::grpc::Status GetChatServerAddress(::grpc::ServerContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChatServerAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChatServerAddress() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetChatServerAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatServerAddress(::grpc::ServerContext* /*context*/, const ::GrpcService::GetChatServerAddressRequestBody* /*request*/, ::GrpcService::GetChatServerAddressResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatServerAddress(::grpc::ServerContext* context, ::GrpcService::GetChatServerAddressRequestBody* request, ::grpc::ServerAsyncResponseWriter< ::GrpcService::GetChatServerAddressResponseBody>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetChatServerAddress<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetChatServerAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChatServerAddress() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GrpcService::GetChatServerAddressRequestBody, ::GrpcService::GetChatServerAddressResponseBody>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response) { return this->GetChatServerAddress(context, request, response); }));}
    void SetMessageAllocatorFor_GetChatServerAddress(
        ::grpc::MessageAllocator< ::GrpcService::GetChatServerAddressRequestBody, ::GrpcService::GetChatServerAddressResponseBody>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GrpcService::GetChatServerAddressRequestBody, ::GrpcService::GetChatServerAddressResponseBody>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChatServerAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatServerAddress(::grpc::ServerContext* /*context*/, const ::GrpcService::GetChatServerAddressRequestBody* /*request*/, ::GrpcService::GetChatServerAddressResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatServerAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::GrpcService::GetChatServerAddressRequestBody* /*request*/, ::GrpcService::GetChatServerAddressResponseBody* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetChatServerAddress<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetChatServerAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChatServerAddress() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetChatServerAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatServerAddress(::grpc::ServerContext* /*context*/, const ::GrpcService::GetChatServerAddressRequestBody* /*request*/, ::GrpcService::GetChatServerAddressResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChatServerAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChatServerAddress() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetChatServerAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatServerAddress(::grpc::ServerContext* /*context*/, const ::GrpcService::GetChatServerAddressRequestBody* /*request*/, ::GrpcService::GetChatServerAddressResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatServerAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChatServerAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChatServerAddress() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChatServerAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChatServerAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatServerAddress(::grpc::ServerContext* /*context*/, const ::GrpcService::GetChatServerAddressRequestBody* /*request*/, ::GrpcService::GetChatServerAddressResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatServerAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChatServerAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChatServerAddress() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GrpcService::GetChatServerAddressRequestBody, ::GrpcService::GetChatServerAddressResponseBody>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GrpcService::GetChatServerAddressRequestBody, ::GrpcService::GetChatServerAddressResponseBody>* streamer) {
                       return this->StreamedGetChatServerAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChatServerAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChatServerAddress(::grpc::ServerContext* /*context*/, const ::GrpcService::GetChatServerAddressRequestBody* /*request*/, ::GrpcService::GetChatServerAddressResponseBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChatServerAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GrpcService::GetChatServerAddressRequestBody,::GrpcService::GetChatServerAddressResponseBody>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetChatServerAddress<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetChatServerAddress<Service > StreamedService;
};

}  // namespace GrpcService


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_grpc_5fservice_2eproto__INCLUDED
