// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_service.proto

#pragma warning(push)
#pragma warning(disable:4251)
#pragma warning(disable:4267)
#include "grpc_service.pb.h"
#include "grpc_service.grpc.pb.h"
#pragma warning(pop)

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace GrpcService {

static const char* Verification_method_names[] = {
  "/GrpcService.Verification/GetVerifyCode",
};

std::unique_ptr< Verification::Stub> Verification::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Verification::Stub> stub(new Verification::Stub(channel, options));
  return stub;
}

Verification::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVerifyCode_(Verification_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Verification::Stub::GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::GrpcService::VerifyCodeResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcService::VerifyCodeRequestBody, ::GrpcService::VerifyCodeResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVerifyCode_, context, request, response);
}

void Verification::Stub::async::GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcService::VerifyCodeRequestBody, ::GrpcService::VerifyCodeResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerifyCode_, context, request, response, std::move(f));
}

void Verification::Stub::async::GetVerifyCode(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerifyCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcService::VerifyCodeResponseBody>* Verification::Stub::PrepareAsyncGetVerifyCodeRaw(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcService::VerifyCodeResponseBody, ::GrpcService::VerifyCodeRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVerifyCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcService::VerifyCodeResponseBody>* Verification::Stub::AsyncGetVerifyCodeRaw(::grpc::ClientContext* context, const ::GrpcService::VerifyCodeRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVerifyCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

Verification::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Verification_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Verification::Service, ::GrpcService::VerifyCodeRequestBody, ::GrpcService::VerifyCodeResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Verification::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcService::VerifyCodeRequestBody* req,
             ::GrpcService::VerifyCodeResponseBody* resp) {
               return service->GetVerifyCode(ctx, req, resp);
             }, this)));
}

Verification::Service::~Service() {
}

::grpc::Status Verification::Service::GetVerifyCode(::grpc::ServerContext* context, const ::GrpcService::VerifyCodeRequestBody* request, ::GrpcService::VerifyCodeResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Encryption_method_names[] = {
  "/GrpcService.Encryption/EncryptPassword",
};

std::unique_ptr< Encryption::Stub> Encryption::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Encryption::Stub> stub(new Encryption::Stub(channel, options));
  return stub;
}

Encryption::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EncryptPassword_(Encryption_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Encryption::Stub::EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::GrpcService::EncryptPasswordResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcService::EncryptPasswordRequestBody, ::GrpcService::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EncryptPassword_, context, request, response);
}

void Encryption::Stub::async::EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcService::EncryptPasswordRequestBody, ::GrpcService::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncryptPassword_, context, request, response, std::move(f));
}

void Encryption::Stub::async::EncryptPassword(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncryptPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcService::EncryptPasswordResponseBody>* Encryption::Stub::PrepareAsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcService::EncryptPasswordResponseBody, ::GrpcService::EncryptPasswordRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EncryptPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcService::EncryptPasswordResponseBody>* Encryption::Stub::AsyncEncryptPasswordRaw(::grpc::ClientContext* context, const ::GrpcService::EncryptPasswordRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncryptPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

Encryption::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Encryption_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Encryption::Service, ::GrpcService::EncryptPasswordRequestBody, ::GrpcService::EncryptPasswordResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Encryption::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcService::EncryptPasswordRequestBody* req,
             ::GrpcService::EncryptPasswordResponseBody* resp) {
               return service->EncryptPassword(ctx, req, resp);
             }, this)));
}

Encryption::Service::~Service() {
}

::grpc::Status Encryption::Service::EncryptPassword(::grpc::ServerContext* context, const ::GrpcService::EncryptPasswordRequestBody* request, ::GrpcService::EncryptPasswordResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Authentication_method_names[] = {
  "/GrpcService.Authentication/AuthenticatePwdReset",
};

std::unique_ptr< Authentication::Stub> Authentication::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Authentication::Stub> stub(new Authentication::Stub(channel, options));
  return stub;
}

Authentication::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AuthenticatePwdReset_(Authentication_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Authentication::Stub::AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::GrpcService::AuthenticatePwdResetResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcService::AuthenticatePwdResetRequestBody, ::GrpcService::AuthenticatePwdResetResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthenticatePwdReset_, context, request, response);
}

void Authentication::Stub::async::AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcService::AuthenticatePwdResetRequestBody, ::GrpcService::AuthenticatePwdResetResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticatePwdReset_, context, request, response, std::move(f));
}

void Authentication::Stub::async::AuthenticatePwdReset(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticatePwdReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcService::AuthenticatePwdResetResponseBody>* Authentication::Stub::PrepareAsyncAuthenticatePwdResetRaw(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcService::AuthenticatePwdResetResponseBody, ::GrpcService::AuthenticatePwdResetRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthenticatePwdReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcService::AuthenticatePwdResetResponseBody>* Authentication::Stub::AsyncAuthenticatePwdResetRaw(::grpc::ClientContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticatePwdResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

Authentication::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authentication_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authentication::Service, ::GrpcService::AuthenticatePwdResetRequestBody, ::GrpcService::AuthenticatePwdResetResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Authentication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcService::AuthenticatePwdResetRequestBody* req,
             ::GrpcService::AuthenticatePwdResetResponseBody* resp) {
               return service->AuthenticatePwdReset(ctx, req, resp);
             }, this)));
}

Authentication::Service::~Service() {
}

::grpc::Status Authentication::Service::AuthenticatePwdReset(::grpc::ServerContext* context, const ::GrpcService::AuthenticatePwdResetRequestBody* request, ::GrpcService::AuthenticatePwdResetResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Interaction_method_names[] = {
  "/GrpcService.Interaction/GetChatServerAddress",
};

std::unique_ptr< Interaction::Stub> Interaction::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Interaction::Stub> stub(new Interaction::Stub(channel, options));
  return stub;
}

Interaction::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetChatServerAddress_(Interaction_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Interaction::Stub::GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::GrpcService::GetChatServerAddressResponseBody* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcService::GetChatServerAddressRequestBody, ::GrpcService::GetChatServerAddressResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChatServerAddress_, context, request, response);
}

void Interaction::Stub::async::GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcService::GetChatServerAddressRequestBody, ::GrpcService::GetChatServerAddressResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatServerAddress_, context, request, response, std::move(f));
}

void Interaction::Stub::async::GetChatServerAddress(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatServerAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcService::GetChatServerAddressResponseBody>* Interaction::Stub::PrepareAsyncGetChatServerAddressRaw(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcService::GetChatServerAddressResponseBody, ::GrpcService::GetChatServerAddressRequestBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChatServerAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcService::GetChatServerAddressResponseBody>* Interaction::Stub::AsyncGetChatServerAddressRaw(::grpc::ClientContext* context, const ::GrpcService::GetChatServerAddressRequestBody& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChatServerAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

Interaction::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interaction_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interaction::Service, ::GrpcService::GetChatServerAddressRequestBody, ::GrpcService::GetChatServerAddressResponseBody, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interaction::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcService::GetChatServerAddressRequestBody* req,
             ::GrpcService::GetChatServerAddressResponseBody* resp) {
               return service->GetChatServerAddress(ctx, req, resp);
             }, this)));
}

Interaction::Service::~Service() {
}

::grpc::Status Interaction::Service::GetChatServerAddress(::grpc::ServerContext* context, const ::GrpcService::GetChatServerAddressRequestBody* request, ::GrpcService::GetChatServerAddressResponseBody* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GrpcService

