syntax = "proto3";

package im.service;

enum StatusCode // HTTP status codes
{
    /** An unknown status-code.

        This value indicates that the value for the status code
        is not in the list of commonly recognized status codes.
        Callers interested in the exactly value should use the
        interface which provides the raw integer.
    */
    unknown = 0;

    continue_                           = 100;

    /** Switching Protocols

        This status indicates that a request to switch to a new
        protocol was accepted and applied by the server. A successful
        response to a WebSocket Upgrade HTTP request will have this
        code.
    */
    switching_protocols                 = 101;
    processing                          = 102;
    early_hints                         = 103;

    ok                                  = 200;
    created                             = 201;
    accepted                            = 202;
    non_authoritative_information       = 203;
    no_content                          = 204;
    reset_content                       = 205;
    partial_content                     = 206;
    multi_status                        = 207;
    already_reported                    = 208;
    im_used                             = 226;

    multiple_choices                    = 300;
    moved_permanently                   = 301;
    found                               = 302;
    see_other                           = 303;
    not_modified                        = 304;
    use_proxy                           = 305;
    temporary_redirect                  = 307;
    permanent_redirect                  = 308;

    bad_request                         = 400;
    unauthorized                        = 401;
    payment_required                    = 402;
    forbidden                           = 403;
    not_found                           = 404;
    method_not_allowed                  = 405;
    not_acceptable                      = 406;
    proxy_authentication_required       = 407;
    request_timeout                     = 408;
    conflict                            = 409;
    gone                                = 410;
    length_required                     = 411;
    precondition_failed                 = 412;
    payload_too_large                   = 413;
    uri_too_long                        = 414;
    unsupported_media_type              = 415;
    range_not_satisfiable               = 416;
    expectation_failed                  = 417;
    i_am_a_teapot                       = 418;
    misdirected_request                 = 421;
    unprocessable_entity                = 422;
    locked                              = 423;
    failed_dependency                   = 424;
    too_early                           = 425;
    upgrade_required                    = 426;
    precondition_required               = 428;
    too_many_requests                   = 429;
    request_header_fields_too_large     = 431;
    unavailable_for_legal_reasons       = 451;

    internal_server_error               = 500;
    not_implemented                     = 501;
    bad_gateway                         = 502;
    service_unavailable                 = 503;
    gateway_timeout                     = 504;
    http_version_not_supported          = 505;
    variant_also_negotiates             = 506;
    insufficient_storage                = 507;
    loop_detected                       = 508;
    not_extended                        = 510;
    network_authentication_required     = 511;
}

service TokenService {
    // 生成Token并分配聊天服务器 (网关→状态服务器)
    rpc GenerateToken(GenerateTokenRequest) returns (GenerateTokenResponse) {}
    
    // 验证Token有效性 (聊天服务器→状态服务器)
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {}
}

service AuthenticationService {
    rpc AuthenticateLogin (AuthenticateLoginRequest) returns (AuthenticateLoginResponse) {}
}

// 网关→状态服务器：生成Token请求
message GenerateTokenRequest {
    string user_uuid = 1;
    string client_device_id = 2;   // 设备唯一标识(设备ID/MAC地址/IMEI)
}
// 状态服务器→网关：生成Token响应
message GenerateTokenResponse {
    StatusCode status = 1;
    string error_detail = 2;
    string token = 3;               // JWT令牌
    int64 expires_at = 4;           // 过期时间戳(毫秒)
    ChatServerInfo chat_server_info = 5;  // 分配的聊天服务器
}


// 聊天服务器→状态服务器：Token验证请求
message ValidateTokenRequest {
    string token = 1;
    string client_device_id = 2;          // 用于绑定设备
}
// 状态服务器→聊天服务器：Token验证响应
message ValidateTokenResponse {
    StatusCode status = 1;
    string error_detail = 2;
    string user_uuid = 3;
    int64 expires_at = 4;          // 实际过期时间戳
}

// 优化后的认证请求
message AuthenticateLoginRequest {
    string username = 1;            // 用户名
    string hashed_password = 2;
    string encrypted_password = 3;  // 加密后的密码
    string client_device_id = 4;    // 设备唯一标识(设备ID/MAC地址/IMEI)
    string client_version = 5;      // 客户端版本
    string client_platform = 6;     // 平台类型 (iOS/Android/Web)
}

// 优化后的认证响应
message AuthenticateLoginResponse {
    StatusCode status = 1;
    string error_detail = 2;
    string user_uuid = 3;           // 返回用户标识
    string token = 4;               // JWT令牌
    int64 token_expires = 5;        // 令牌过期时间
    ChatServerInfo chat_server_info = 6; // 分配的聊天服务器
}

// 优化服务器信息结构
message ChatServerInfo {
    string id = 1;                  // 新增：服务器唯一ID
    string zone = 2;                // 服务器区域
    string host = 3;                // 服务器地址
    int32 port = 4;                 // 服务端口
    int32 current_load = 5;         // 当前负载百分比
    int32 max_connections = 6;      // 新增：最大连接数
}