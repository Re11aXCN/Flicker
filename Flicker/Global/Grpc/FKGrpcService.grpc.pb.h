// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FKGrpcService.proto
#ifndef GRPC_FKGrpcService_2eproto__INCLUDED
#define GRPC_FKGrpcService_2eproto__INCLUDED

#include "FKGrpcService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace im {
namespace service {

class TokenService final {
 public:
  static constexpr char const* service_full_name() {
    return "im.service.TokenService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 生成Token并分配聊天服务器 (网关→状态服务器)
    virtual ::grpc::Status GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::im::service::GenerateTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::GenerateTokenResponse>> AsyncGenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::GenerateTokenResponse>>(AsyncGenerateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::GenerateTokenResponse>> PrepareAsyncGenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::GenerateTokenResponse>>(PrepareAsyncGenerateTokenRaw(context, request, cq));
    }
    // 验证Token有效性 (聊天服务器→状态服务器)
    virtual ::grpc::Status ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::im::service::ValidateTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::ValidateTokenResponse>> AsyncValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::ValidateTokenResponse>>(AsyncValidateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::ValidateTokenResponse>> PrepareAsyncValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::ValidateTokenResponse>>(PrepareAsyncValidateTokenRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 生成Token并分配聊天服务器 (网关→状态服务器)
      virtual void GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 验证Token有效性 (聊天服务器→状态服务器)
      virtual void ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::im::service::GenerateTokenResponse>* AsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::im::service::GenerateTokenResponse>* PrepareAsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::im::service::ValidateTokenResponse>* AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::im::service::ValidateTokenResponse>* PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::im::service::GenerateTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::GenerateTokenResponse>> AsyncGenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::GenerateTokenResponse>>(AsyncGenerateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::GenerateTokenResponse>> PrepareAsyncGenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::GenerateTokenResponse>>(PrepareAsyncGenerateTokenRaw(context, request, cq));
    }
    ::grpc::Status ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::im::service::ValidateTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::ValidateTokenResponse>> AsyncValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::ValidateTokenResponse>>(AsyncValidateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::ValidateTokenResponse>> PrepareAsyncValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::ValidateTokenResponse>>(PrepareAsyncValidateTokenRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::im::service::GenerateTokenResponse>* AsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::im::service::GenerateTokenResponse>* PrepareAsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::im::service::ValidateTokenResponse>* AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::im::service::ValidateTokenResponse>* PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateToken_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 生成Token并分配聊天服务器 (网关→状态服务器)
    virtual ::grpc::Status GenerateToken(::grpc::ServerContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response);
    // 验证Token有效性 (聊天服务器→状态服务器)
    virtual ::grpc::Status ValidateToken(::grpc::ServerContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateToken() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::im::service::GenerateTokenRequest* /*request*/, ::im::service::GenerateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateToken(::grpc::ServerContext* context, ::im::service::GenerateTokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::im::service::GenerateTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateToken() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::im::service::ValidateTokenRequest* /*request*/, ::im::service::ValidateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateToken(::grpc::ServerContext* context, ::im::service::ValidateTokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::im::service::ValidateTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GenerateToken<WithAsyncMethod_ValidateToken<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateToken() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::im::service::GenerateTokenRequest, ::im::service::GenerateTokenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response) { return this->GenerateToken(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateToken(
        ::grpc::MessageAllocator< ::im::service::GenerateTokenRequest, ::im::service::GenerateTokenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::im::service::GenerateTokenRequest, ::im::service::GenerateTokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::im::service::GenerateTokenRequest* /*request*/, ::im::service::GenerateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::im::service::GenerateTokenRequest* /*request*/, ::im::service::GenerateTokenResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidateToken() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::im::service::ValidateTokenRequest, ::im::service::ValidateTokenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response) { return this->ValidateToken(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateToken(
        ::grpc::MessageAllocator< ::im::service::ValidateTokenRequest, ::im::service::ValidateTokenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::im::service::ValidateTokenRequest, ::im::service::ValidateTokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::im::service::ValidateTokenRequest* /*request*/, ::im::service::ValidateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::im::service::ValidateTokenRequest* /*request*/, ::im::service::ValidateTokenResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GenerateToken<WithCallbackMethod_ValidateToken<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateToken() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::im::service::GenerateTokenRequest* /*request*/, ::im::service::GenerateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateToken() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::im::service::ValidateTokenRequest* /*request*/, ::im::service::ValidateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateToken() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::im::service::GenerateTokenRequest* /*request*/, ::im::service::GenerateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateToken() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::im::service::ValidateTokenRequest* /*request*/, ::im::service::ValidateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateToken() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::im::service::GenerateTokenRequest* /*request*/, ::im::service::GenerateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidateToken() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::im::service::ValidateTokenRequest* /*request*/, ::im::service::ValidateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateToken() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::im::service::GenerateTokenRequest, ::im::service::GenerateTokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::im::service::GenerateTokenRequest, ::im::service::GenerateTokenResponse>* streamer) {
                       return this->StreamedGenerateToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::im::service::GenerateTokenRequest* /*request*/, ::im::service::GenerateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::im::service::GenerateTokenRequest,::im::service::GenerateTokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateToken() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::im::service::ValidateTokenRequest, ::im::service::ValidateTokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::im::service::ValidateTokenRequest, ::im::service::ValidateTokenResponse>* streamer) {
                       return this->StreamedValidateToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::im::service::ValidateTokenRequest* /*request*/, ::im::service::ValidateTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::im::service::ValidateTokenRequest,::im::service::ValidateTokenResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GenerateToken<WithStreamedUnaryMethod_ValidateToken<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GenerateToken<WithStreamedUnaryMethod_ValidateToken<Service > > StreamedService;
};

class AuthenticationService final {
 public:
  static constexpr char const* service_full_name() {
    return "im.service.AuthenticationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::im::service::AuthenticateLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::AuthenticateLoginResponse>> AsyncAuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::AuthenticateLoginResponse>>(AsyncAuthenticateLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::AuthenticateLoginResponse>> PrepareAsyncAuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::im::service::AuthenticateLoginResponse>>(PrepareAsyncAuthenticateLoginRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::im::service::AuthenticateLoginResponse>* AsyncAuthenticateLoginRaw(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::im::service::AuthenticateLoginResponse>* PrepareAsyncAuthenticateLoginRaw(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::im::service::AuthenticateLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::AuthenticateLoginResponse>> AsyncAuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::AuthenticateLoginResponse>>(AsyncAuthenticateLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::AuthenticateLoginResponse>> PrepareAsyncAuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::im::service::AuthenticateLoginResponse>>(PrepareAsyncAuthenticateLoginRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response, std::function<void(::grpc::Status)>) override;
      void AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::im::service::AuthenticateLoginResponse>* AsyncAuthenticateLoginRaw(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::im::service::AuthenticateLoginResponse>* PrepareAsyncAuthenticateLoginRaw(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AuthenticateLogin_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AuthenticateLogin(::grpc::ServerContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AuthenticateLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuthenticateLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AuthenticateLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticateLogin(::grpc::ServerContext* /*context*/, const ::im::service::AuthenticateLoginRequest* /*request*/, ::im::service::AuthenticateLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticateLogin(::grpc::ServerContext* context, ::im::service::AuthenticateLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::im::service::AuthenticateLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AuthenticateLogin<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AuthenticateLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuthenticateLogin() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::im::service::AuthenticateLoginRequest, ::im::service::AuthenticateLoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response) { return this->AuthenticateLogin(context, request, response); }));}
    void SetMessageAllocatorFor_AuthenticateLogin(
        ::grpc::MessageAllocator< ::im::service::AuthenticateLoginRequest, ::im::service::AuthenticateLoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::im::service::AuthenticateLoginRequest, ::im::service::AuthenticateLoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuthenticateLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticateLogin(::grpc::ServerContext* /*context*/, const ::im::service::AuthenticateLoginRequest* /*request*/, ::im::service::AuthenticateLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthenticateLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::im::service::AuthenticateLoginRequest* /*request*/, ::im::service::AuthenticateLoginResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AuthenticateLogin<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AuthenticateLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuthenticateLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AuthenticateLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticateLogin(::grpc::ServerContext* /*context*/, const ::im::service::AuthenticateLoginRequest* /*request*/, ::im::service::AuthenticateLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuthenticateLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuthenticateLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AuthenticateLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticateLogin(::grpc::ServerContext* /*context*/, const ::im::service::AuthenticateLoginRequest* /*request*/, ::im::service::AuthenticateLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticateLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuthenticateLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuthenticateLogin() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuthenticateLogin(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuthenticateLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthenticateLogin(::grpc::ServerContext* /*context*/, const ::im::service::AuthenticateLoginRequest* /*request*/, ::im::service::AuthenticateLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthenticateLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuthenticateLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuthenticateLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::im::service::AuthenticateLoginRequest, ::im::service::AuthenticateLoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::im::service::AuthenticateLoginRequest, ::im::service::AuthenticateLoginResponse>* streamer) {
                       return this->StreamedAuthenticateLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuthenticateLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuthenticateLogin(::grpc::ServerContext* /*context*/, const ::im::service::AuthenticateLoginRequest* /*request*/, ::im::service::AuthenticateLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticateLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::im::service::AuthenticateLoginRequest,::im::service::AuthenticateLoginResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AuthenticateLogin<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AuthenticateLogin<Service > StreamedService;
};

}  // namespace service
}  // namespace im


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_FKGrpcService_2eproto__INCLUDED
