// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FKGrpcService.proto

#pragma warning(push)
#pragma warning(disable:4251)
#pragma warning(disable:4267)
#include "FKGrpcService.pb.h"
#include "FKGrpcService.grpc.pb.h"
#pragma warning(pop)

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace im {
namespace service {

static const char* TokenService_method_names[] = {
  "/im.service.TokenService/GenerateToken",
  "/im.service.TokenService/ValidateToken",
};

std::unique_ptr< TokenService::Stub> TokenService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TokenService::Stub> stub(new TokenService::Stub(channel, options));
  return stub;
}

TokenService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GenerateToken_(TokenService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateToken_(TokenService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TokenService::Stub::GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::im::service::GenerateTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::im::service::GenerateTokenRequest, ::im::service::GenerateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateToken_, context, request, response);
}

void TokenService::Stub::async::GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::im::service::GenerateTokenRequest, ::im::service::GenerateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateToken_, context, request, response, std::move(f));
}

void TokenService::Stub::async::GenerateToken(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::im::service::GenerateTokenResponse>* TokenService::Stub::PrepareAsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::im::service::GenerateTokenResponse, ::im::service::GenerateTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::im::service::GenerateTokenResponse>* TokenService::Stub::AsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::im::service::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TokenService::Stub::ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::im::service::ValidateTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::im::service::ValidateTokenRequest, ::im::service::ValidateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateToken_, context, request, response);
}

void TokenService::Stub::async::ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::im::service::ValidateTokenRequest, ::im::service::ValidateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateToken_, context, request, response, std::move(f));
}

void TokenService::Stub::async::ValidateToken(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::im::service::ValidateTokenResponse>* TokenService::Stub::PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::im::service::ValidateTokenResponse, ::im::service::ValidateTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::im::service::ValidateTokenResponse>* TokenService::Stub::AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::im::service::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

TokenService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TokenService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TokenService::Service, ::im::service::GenerateTokenRequest, ::im::service::GenerateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TokenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::im::service::GenerateTokenRequest* req,
             ::im::service::GenerateTokenResponse* resp) {
               return service->GenerateToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TokenService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TokenService::Service, ::im::service::ValidateTokenRequest, ::im::service::ValidateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TokenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::im::service::ValidateTokenRequest* req,
             ::im::service::ValidateTokenResponse* resp) {
               return service->ValidateToken(ctx, req, resp);
             }, this)));
}

TokenService::Service::~Service() {
}

::grpc::Status TokenService::Service::GenerateToken(::grpc::ServerContext* context, const ::im::service::GenerateTokenRequest* request, ::im::service::GenerateTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TokenService::Service::ValidateToken(::grpc::ServerContext* context, const ::im::service::ValidateTokenRequest* request, ::im::service::ValidateTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AuthenticationService_method_names[] = {
  "/im.service.AuthenticationService/AuthenticateLogin",
};

std::unique_ptr< AuthenticationService::Stub> AuthenticationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AuthenticationService::Stub> stub(new AuthenticationService::Stub(channel, options));
  return stub;
}

AuthenticationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AuthenticateLogin_(AuthenticationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AuthenticationService::Stub::AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::im::service::AuthenticateLoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::im::service::AuthenticateLoginRequest, ::im::service::AuthenticateLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthenticateLogin_, context, request, response);
}

void AuthenticationService::Stub::async::AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::im::service::AuthenticateLoginRequest, ::im::service::AuthenticateLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticateLogin_, context, request, response, std::move(f));
}

void AuthenticationService::Stub::async::AuthenticateLogin(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticateLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::im::service::AuthenticateLoginResponse>* AuthenticationService::Stub::PrepareAsyncAuthenticateLoginRaw(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::im::service::AuthenticateLoginResponse, ::im::service::AuthenticateLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthenticateLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::im::service::AuthenticateLoginResponse>* AuthenticationService::Stub::AsyncAuthenticateLoginRaw(::grpc::ClientContext* context, const ::im::service::AuthenticateLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

AuthenticationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthenticationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthenticationService::Service, ::im::service::AuthenticateLoginRequest, ::im::service::AuthenticateLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthenticationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::im::service::AuthenticateLoginRequest* req,
             ::im::service::AuthenticateLoginResponse* resp) {
               return service->AuthenticateLogin(ctx, req, resp);
             }, this)));
}

AuthenticationService::Service::~Service() {
}

::grpc::Status AuthenticationService::Service::AuthenticateLogin(::grpc::ServerContext* context, const ::im::service::AuthenticateLoginRequest* request, ::im::service::AuthenticateLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace im
}  // namespace service

